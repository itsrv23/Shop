/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.got.shop.controller;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import ru.got.shop.model.dto.AdDto;
import ru.got.shop.model.dto.FullAdDto;
import ru.got.shop.model.dto.ResponseWrapperAdsDto;

import javax.annotation.Generated;
import javax.validation.Valid;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Ads", description = "EndPoints related to Ads")
public interface AdsApi {

    /**
     * GET /ads : getALLAds
     *
     * @return OK (status code 200)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     */
    @Operation(operationId = "getAllAds", summary = "geting all ads wrapped into ResponseWrapperAds", tags = { "Ads" })
    @RequestMapping(method = RequestMethod.GET, value = "/ads", produces = { "application/json" })
    ResponseEntity<ResponseWrapperAdsDto> getAllAds();

    /**
     * POST /ad : adDto
     * Добавить ads
     *
     * @param createAds createAds (required)
     * @return OK (status code 200)
     * or Created (status code 201)
     * or Unauthorized (status code 401)
     * or Bad Request (status code 400)
     * or Not Found (status code 404)
     */
    @Operation(operationId = "addAd",
            summary = "adding an advertisment",
            tags = { "Ads" },
            responses = @ApiResponse(responseCode = "201",
                    description = "Created",
                    content = @Content(mediaType = MediaType.MULTIPART_MIXED_VALUE,
                            schema = @Schema(implementation = AdDto.class))))
    @RequestMapping(method = RequestMethod.POST,
            value = "/ads",
            produces = MediaType.APPLICATION_JSON_VALUE,
            consumes = MediaType.MULTIPART_FORM_DATA_VALUE)
    ResponseEntity<AdDto> addAd(@Valid @RequestPart(value = "properties") AdDto adDto,
                                @RequestParam(value = "image") MultipartFile file);

    /**
     * GET /ads/me : Ads
     *
     * @param authorId Author id
     * @return ResponseEntity<ResponseWrapperAds>
     */
    @Operation(operationId = "getMyAds", summary = "get all ads of me", tags = { "Ads" })
    @RequestMapping(method = RequestMethod.GET, value = "/ads/me", produces = { "application/json" })
    ResponseEntity<ResponseWrapperAdsDto> getMyAds();

    /**
     * GET /ads/{id} : getAds
     *
     * @param id id (required)
     * @return OK (status code 200)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     */
    @Operation(operationId = "getFullAd", summary = "get certain full ad", tags = { "Ads" })
    @RequestMapping(method = RequestMethod.GET, value = "/ads/{id}", produces = MediaType.APPLICATION_JSON_VALUE)
    ResponseEntity<FullAdDto> getFullAd(
            @Parameter(name = "id", description = "id", required = true, schema = @Schema(description = ""))
            @PathVariable("id") Integer id);

    /**
     * GET /ads/{id}/image : get image by ads id
     *
     * @param id id (required)
     * @return OK (status code 200)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     * or Not Found (status code 404)
     */
    @Operation(operationId = "getFullAd", summary = "get certain full ad", tags = { "Ads" })
    @RequestMapping(method = RequestMethod.GET, value = "/ads/{id}/image")
    ResponseEntity<?> getAdImage(@PathVariable("id") Integer id);

    /**
     * DELETE /ads/{id} : removeAds
     *
     * @param id id (required)
     * @return No Content (status code 204)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     */
    @Operation(operationId = "removeAd", summary = "remove an advertisment", tags = { "Ads" })
    @RequestMapping(method = RequestMethod.DELETE, value = "/ads/{id}", produces = { "application/json" })
    ResponseEntity<AdDto> removeAd(
            @Parameter(name = "id", description = "id", required = true, schema = @Schema(description = ""))
            @PathVariable("id") Integer id);

    /**
     * PATCH /ads/{id} : updateAds
     *
     * @param id    id (required)
     * @param adDto ads (required)
     * @return OK (status code 200)
     * or Unauthorized (status code 401)
     * or Forbidden (status code 403)
     */
    @Operation(operationId = "updateAd", summary = "update an advertisment", tags = { "Ads" })
    @RequestMapping(method = RequestMethod.PATCH,
            value = "/ads/{id}",
            produces = { "application/json" },
            consumes = { "application/json" })
    ResponseEntity<AdDto> updateAd(
            @Parameter(name = "id", description = "id", required = true, schema = @Schema(description = ""))
            @PathVariable("id") Integer id,
            @Parameter(name = "ads", description = "ads", required = true, schema = @Schema(description = ""))
            @RequestBody AdDto adDto);
}
