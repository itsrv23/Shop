/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.4.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.got.shop.controller;

import ru.got.shop.model.dto.NewPassword;
import ru.got.shop.model.dto.ResponseWrapperUser;
import ru.got.shop.model.dto.User;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen")
@Validated
@Tag(name = "Users", description = "the Users API")
public interface UsersApi {

    /**
     * GET /users/{id} : getUser
     *
     * @param id id (required)
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getUserUsingGET",
        summary = "getUser",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  User.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/{id}",
        produces = { "application/json" }
    )
    ResponseEntity<User> getUserUsingGET(
        @Parameter(name = "id", description = "id", required = true, schema = @Schema(description = "")) @PathVariable("id") Integer id
    );


    /**
     * GET /users/me : getUsers
     *
     * @return OK (status code 200)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "getUsersUsingGET",
        summary = "getUsers",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  ResponseWrapperUser.class))),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/users/me",
        produces = { "application/json" }
    )
    ResponseEntity<ResponseWrapperUser> getUsersUsingGET(
        
    );


    /**
     * POST /users/set_password : setPassword
     *
     * @param newPassword newPassword (required)
     * @return OK (status code 200)
     *         or Created (status code 201)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     *         or Not Found (status code 404)
     */
    @Operation(
        operationId = "setPasswordUsingPOST",
        summary = "setPassword",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  NewPassword.class))),
            @ApiResponse(responseCode = "201", description = "Created"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden"),
            @ApiResponse(responseCode = "404", description = "Not Found")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/users/set_password",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<NewPassword> setPasswordUsingPOST(
        @Parameter(name = "newPassword", description = "newPassword", required = true, schema = @Schema(description = "")) @Valid @RequestBody NewPassword newPassword
    );


    /**
     * PATCH /users/me : updateUser
     *
     * @param user user (required)
     * @return OK (status code 200)
     *         or No Content (status code 204)
     *         or Unauthorized (status code 401)
     *         or Forbidden (status code 403)
     */
    @Operation(
        operationId = "updateUserUsingPATCH",
        summary = "updateUser",
        tags = { "Users" },
        responses = {
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", schema = @Schema(implementation =  User.class))),
            @ApiResponse(responseCode = "204", description = "No Content"),
            @ApiResponse(responseCode = "401", description = "Unauthorized"),
            @ApiResponse(responseCode = "403", description = "Forbidden")
        }
    )
    @RequestMapping(
        method = RequestMethod.PATCH,
        value = "/users/me",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    ResponseEntity<User> updateUserUsingPATCH(
        @Parameter(name = "user", description = "user", required = true, schema = @Schema(description = "")) @Valid @RequestBody User user
    );

}
